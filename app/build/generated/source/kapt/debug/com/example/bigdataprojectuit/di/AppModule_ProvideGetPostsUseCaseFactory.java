// Generated by Dagger (https://dagger.dev).
package com.example.bigdataprojectuit.di;

import com.example.bigdataprojectuit.data.repository.PostRepository;
import com.example.bigdataprojectuit.domain.usecase.GetPostsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideGetPostsUseCaseFactory implements Factory<GetPostsUseCase> {
  private final Provider<PostRepository> repositoryProvider;

  public AppModule_ProvideGetPostsUseCaseFactory(Provider<PostRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetPostsUseCase get() {
    return provideGetPostsUseCase(repositoryProvider.get());
  }

  public static AppModule_ProvideGetPostsUseCaseFactory create(
      Provider<PostRepository> repositoryProvider) {
    return new AppModule_ProvideGetPostsUseCaseFactory(repositoryProvider);
  }

  public static GetPostsUseCase provideGetPostsUseCase(PostRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideGetPostsUseCase(repository));
  }
}
